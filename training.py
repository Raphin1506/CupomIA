# Importa√ß√µes principais
from flask import Flask, request, jsonify  # Para criar a API e manipular requisi√ß√µes/respostas
import os  # Para manipula√ß√£o de arquivos e diret√≥rios
import cv2  # OpenCV para manipula√ß√£o de imagens
import pytesseract  # OCR (leitura de texto em imagem)
from sklearn.feature_extraction.text import TfidfVectorizer  # Vetoriza√ß√£o de texto
from sklearn.linear_model import LogisticRegression  # Modelo de classifica√ß√£o
from sklearn.pipeline import make_pipeline  # Facilita cria√ß√£o do pipeline com vetorizador + modelo
from werkzeug.utils import secure_filename  # Para salvar arquivos com nomes seguros
from PIL import Image  # Manipula√ß√£o de imagens (opcional nesse c√≥digo)
import joblib  # Para salvar/carregar modelos treinados (n√£o utilizado aqui, mas pode ser √∫til futuramente)
from nltk.corpus import stopwords  # Palavras irrelevantes (stopwords) para vetoriza√ß√£o
import nltk  # Toolkit de NLP
from flask_cors import CORS  # Libera CORS para requisi√ß√µes entre diferentes origens

# üîß Define o caminho do execut√°vel do Tesseract OCR
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
os.environ['TESSDATA_PREFIX'] = r"C:\Program Files\Tesseract-OCR\tessdata"

# üöÄ Cria√ß√£o do app Flask e configura√ß√£o de CORS
app = Flask(__name__)
CORS(app)  # Permite chamadas de qualquer origem (frontend separado)

# üìÅ Pasta para uploads tempor√°rios
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# üìÇ Pastas com imagens para treino do modelo
PASTA_CUPONS = "cupons"           # Imagens que s√£o cupons fiscais
PASTA_NAO_CUPONS = "nao_cupons"   # Imagens que n√£o s√£o cupons fiscais

# üìÑ Fun√ß√£o para extrair texto de uma imagem com OCR
def extrair_texto(imagem_path):
    img = cv2.imread(imagem_path)               # L√™ a imagem
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Converte para escala de cinza
    texto = pytesseract.image_to_string(img, lang='por')  # Extrai texto usando OCR com idioma portugu√™s
    return texto

# üß† Fun√ß√£o que treina o modelo de Machine Learning com base nas imagens
def treinar_modelo():
    textos, rotulos = [], []

    # Itera sobre as duas categorias de imagens
    for pasta, rotulo in [(PASTA_CUPONS, 1), (PASTA_NAO_CUPONS, 0)]:
        for arquivo in os.listdir(pasta):
            caminho = os.path.join(pasta, arquivo)
            try:
                texto = extrair_texto(caminho).strip()
                if texto: ## s√≥ adiciona se texto n√£o for vazio
                    textos.append(texto)
                    rotulos.append(rotulo)
                else:
                    print(f"[AVISO] Texto vazio em {caminho}")
            except Exception as e:
                print(f"[ERRO] Falha ao processar {caminho}: {e}")

    # Verifica se foi poss√≠vel extrair algum texto
    if not textos:
        raise ValueError("Nenhum texto extra√≠do v√°lido para treinar o modelo!")

    # Baixa e carrega as stopwords (palavras irrelevantes) em portugu√™s
    nltk.download('stopwords')
    stopwords_portugues = stopwords.words('portuguese')

    # Cria o pipeline: vetoriza√ß√£o + regress√£o log√≠stica
    modelo = make_pipeline(
        TfidfVectorizer(stop_words=stopwords_portugues),
        LogisticRegression()
    )

    # Treina o modelo
    modelo.fit(textos, rotulos)
    return modelo

# Treina o modelo ao iniciar o servidor
modelo = treinar_modelo()

# üì• Rota para verificar se uma imagem enviada √© um cupom fiscal
@app.route('/verificar', methods=['POST'])
def verificar_imagem():
    if 'imagem' not in request.files:
        return jsonify({'erro': 'Envie uma imagem com o campo "imagem"'}), 400

    # Salva a imagem recebida
    arquivo = request.files['imagem']
    caminho = os.path.join(UPLOAD_FOLDER, secure_filename(arquivo.filename))
    arquivo.save(caminho)

    # Extrai texto da imagem
    texto = extrair_texto(caminho)

    if not texto.strip():
        return jsonify({'erro': 'Texto n√£o p√¥de ser extra√≠do da imagem.'}), 400

    # Faz a predi√ß√£o com o modelo treinado
    pred = modelo.predict([texto])[0]  # 0 = n√£o √© cupom, 1 = √© cupom
    prob = modelo.predict_proba([texto])[0][1]  # Probabilidade de ser cupom

    # Monta resposta JSON
    resultado = {
        "resultado": "√â cupom fiscal" if pred == 1 else "N√£o √© cupom fiscal",
        "confian√ßa": round(prob * 100, 2),
        "texto_extraido": texto.strip()
    }

    return jsonify(resultado)

# üîÅ Inicia o servidor Flask em modo de depura√ß√£o
if __name__ == '__main__':
    app.run(debug=True)
